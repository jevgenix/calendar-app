import type { NextPage } from "next";
import {
  useSession,
  signIn,
  getSession,
  GetSessionParams,
  signOut,
} from "next-auth/react";
import React, { useEffect, useState } from "react";
import { Schedule, GetSResults, Weather, Calendar } from "../types";
import styles from "../styles/Home.module.css";
import Navbar from "../components/MainPage/NavBar/Navbar";
import { Head, Main } from "next/document";
import MainPageAdvice from "../components/MainPage/MainPageAdvice";
import MainPagePomo from "../components/MainPage/MainPagePomo";
import MainPageWeather from "../components/MainPage/MainPageWeather";
import moment from "moment";

const Home: NextPage = () => {
  const { data: session, status } = useSession();
  const [dataG, setDataG] = useState<Calendar>();

  useEffect(() => {
    const fData = async () => {
      const response = await fetch(
        "/api/getCalendarEvents/c7b9cbd0651ff8e00fe3f367826385d6ad7277fa8469667196f250f1e10b246a@group.calendar.google.com"
      );
      const events = await response.json();
      setDataG(events);
      console.log(events);
    };
    void fData();
  }, []);

  <Head>
    <Head>Home page</Head>
    <meta name="description" content="Generated by create next app" />
    <link rel="icon" href="/favicon.ico" />
  </Head>;

  if (status === "authenticated") {
    return (
      <div>
        <Navbar />
        <main className={styles.main}>
          <div>
            <div className={styles.flexCenter}>
              <MainPagePomo />
            </div>
            <div className={styles.flexCenter}>
              <MainPageWeather />
            </div>
          </div>

          <div className={styles.schedule}>
            <h1 className={styles.header}>Schedule</h1>
            {dataG?.events.map((a) => {
              return (
                <ul key={a.id} className={styles.scList}>
                  <li className={styles.task}>{a.summary}</li>
                  <li className={styles.task}>
                    Start:{" "}
                    {moment(a.start.dateTime).format("HH:mm (DD-MM-YYYY)")}
                  </li>
                  <li className={styles.task}>
                    End: {moment(a.end.dateTime).format("HH:mm (DD-MM-YYYY)")}
                  </li>
                </ul>
              );
            })}
          </div>
        </main>
      </div>
    );
  } else {
    return (
      //TÄHÄN MYÖS
      <div>
        <p>You are not signed in.</p>
        <button onClick={() => signIn()}>Sign in</button>
      </div>
    );
  }
};

export default Home;
export const getServerSideProps = async (
  context: GetSessionParams | undefined
) => {
  const session = await getSession(context);

  //dummy data
  // const res = await fetch(
  //     `http://localhost:3000/api/getCalendarEvents/c7b9cbd0651ff8e00fe3f367826385d6ad7277fa8469667196f250f1e10b246a@group.calendar.google.com`
  // );
  // const { Events }: GetSResults = await res.json();

  if (!session) {
    return {
      redirect: {
        destination: "/login",
      },
    };
  }
  return {
    props: {
      session,
      // tasks: Events
    },
  };
};
